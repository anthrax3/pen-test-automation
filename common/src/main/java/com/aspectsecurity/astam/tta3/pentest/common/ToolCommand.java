package com.aspectsecurity.astam.tta3.pentest.common;

import org.apache.commons.lang3.builder.ToStringBuilder;
import org.apache.commons.lang3.builder.ToStringStyle;

import java.nio.charset.StandardCharsets;


/*
    Application Security Threat Attack Modeling (ASTAM)

    Copyright (C) 2017 Applied Visions - http://securedecisions.com

    Written by Aspect Security - http://aspectsecurity.com

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/
public class ToolCommand {

    private final String toolExecutableName;
    private final boolean verbose;
    private final byte[] fileContents;

    public ToolCommand(String toolExecutableName) {
        this(toolExecutableName, new byte[0], false);
    }

    public ToolCommand(String toolExecutableName, byte[] fileContents) {
        this(toolExecutableName, fileContents, false);
    }

    public ToolCommand(String toolExecutableName, byte[] fileContents, boolean verbose) {
        this.toolExecutableName = toolExecutableName;
        if ( fileContents == null ) {
            this.fileContents = new byte[0];
        } else {
            this.fileContents = new byte[fileContents.length];
            System.arraycopy(fileContents, 0, this.fileContents,0,fileContents.length);
        }
        this.verbose = verbose;
    }

    public String getToolExecutableName() {
        return toolExecutableName;
    }

    public boolean isVerbose() {
        return verbose;
    }

    public byte[] getFileContents() {
        return fileContents;
    }

    @Override
    public String toString() {
        return new ToStringBuilder(this, ToStringStyle.SHORT_PREFIX_STYLE)
                .append("toolExecutableName", toolExecutableName)
                .append("verbose", verbose)
                .append("fileContents", new String(fileContents, StandardCharsets.UTF_8))
                .toString();
    }
}

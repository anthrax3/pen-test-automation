package com.aspectsecurity.astam.tta3.pentest.common;

/*
    Application Security Threat Attack Modeling (ASTAM)

    Copyright (C) 2017 Applied Visions - http://securedecisions.com

    Written by Aspect Security - http://aspectsecurity.com

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/

import org.apache.commons.lang3.builder.ToStringBuilder;
import org.apache.commons.lang3.builder.ToStringStyle;

import java.util.Collection;
import java.util.Collections;
import java.util.HashSet;
import java.util.Set;

/**
 *
 */
public class ToolResult {

    // TODO: should eventually become reproduction steps for exploit
    public static interface Exploit {}

    private final boolean successfulRun;
    private final boolean vulnerabilityFound;
    private final int quantityFound;
    private final String resultsText;
    private final Set<Exploit> exploits = new HashSet<>();


    public ToolResult(boolean successfulRun, boolean vulnerabilityFound, int quantityFound, String resultsText) {
        this.successfulRun = successfulRun;
        this.vulnerabilityFound = vulnerabilityFound;
        this.quantityFound = quantityFound;
        this.resultsText = resultsText;
    }

    public ToolResult(boolean successfulRun, boolean vulnerabilityFound, int quantityFound, String resultsText, Collection<? extends Exploit> exploits) {
        this(successfulRun, vulnerabilityFound, quantityFound, resultsText);

        this.exploits.addAll(exploits);
    }

    public boolean isSuccessfulRun() {
        return successfulRun;
    }

    public boolean isVulnerabilityFound() {
        return vulnerabilityFound;
    }

    public int getQuantityFound() {
        return quantityFound;
    }

    public String getResultsText() {
        return resultsText;
    }

    public Set<Exploit> getExploits() { return Collections.unmodifiableSet(exploits); }

    public String toString() {
        return ToStringBuilder.reflectionToString(this, ToStringStyle.SIMPLE_STYLE);
    }
}

package com.aspectsecurity.tta3.pentest.tools.crydra16;

import com.aspectsecurity.astam.tta3.pentest.common.ToolResult;
import org.apache.commons.lang3.builder.ToStringBuilder;
import org.apache.commons.lang3.builder.ToStringStyle;

import java.util.ArrayList;
import java.util.Collection;

/*
    Application Security Threat Attack Modeling (ASTAM)

    Copyright (C) 2017 Applied Visions - http://securedecisions.com

    Written by Aspect Security - https://aspectsecurity.com

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/

/**
 * Results object for Crydra-16 tool output.
 *
 * @author Aspect Security
 */
public class Crydra16Results extends ToolResult {

    public Crydra16Results(boolean successfulRun, boolean vulnerabilityFound, int quantityFound, String resultsText,
                           Collection<? extends Exploit> exploits) {
        super(successfulRun, vulnerabilityFound, quantityFound, resultsText, exploits);
    }

    public static class DiscoveredPassword implements Exploit {
        private final String username;
        private final String password;

        public DiscoveredPassword(String username, String password) {
            this.username = username;
            this.password = password;
        }

        public String getUsername() {
            return username;
        }

        public String getPassword() {
            return password;
        }

        public String toString() {
            return ToStringBuilder.reflectionToString(this, ToStringStyle.SIMPLE_STYLE);
        }
    }

    public String toString() {
        return ToStringBuilder.reflectionToString(this, ToStringStyle.SIMPLE_STYLE);
    }
}

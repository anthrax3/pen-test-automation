package com.aspectsecurity.astam.tta3.pentest.tools.dummy;

import com.aspectsecurity.astam.tta3.pentest.common.ExecutionResult;
import com.aspectsecurity.astam.tta3.pentest.common.ToolCommand;
import com.aspectsecurity.astam.tta3.pentest.common.ToolResult;
import com.aspectsecurity.astam.tta3.pentest.common.Tta3Attack;
import com.aspectsecurity.astam.tta3.pentest.tools.spi.ToolParameter;
import com.aspectsecurity.astam.tta3.pentest.tools.spi.ToolWrapper;

import java.util.Collections;
import java.util.Set;

/*
    Application Security Threat Attack Modeling (ASTAM)

    Copyright (C) 2017 Applied Visions - http://securedecisions.com

    Written by Aspect Security - http://aspectsecurity.com

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/

/**
 * Wrapper SPI for ESM-7 tool.
 *
 * @author Aspect Security
 */
public class DummyWrapper implements ToolWrapper {

    @Override
    public String getToolName() {
        return "Dummy Tool";
    }

    @Override
    public Set<ToolParameter> getToolParameters() {
        return Collections.emptySet();
    }

    @Override
    public Set<String> getSupportedAttacks() {
        return Collections.singleton("CAPEC-0");
    }

    @Override
    public ToolResult parseAttackResult(Tta3Attack attack, ExecutionResult executionResult) {
        // TODO: Let's get a reasonable dummy result object instead of Null
        return null;
    }

    @Override
    public ToolCommand generateToolCommand(Tta3Attack attack) {

        return new ToolCommand("dummyCommand");
    }
}

package com.aspectsecurity.tta3.pentest.tools.esm7;

import com.aspectsecurity.astam.tta3.pentest.common.ToolResult;
import org.apache.commons.lang3.builder.ToStringBuilder;
import org.apache.commons.lang3.builder.ToStringStyle;

import java.util.Collection;

/*
    Application Security Threat Attack Modeling (ASTAM)

    Copyright (C) 2017 Applied Visions - http://securedecisions.com

    Written by Aspect Security - https://aspectsecurity.com

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/

/**
 * Results object for ESM-7 tool output.
 *
 * @author Aspect Security
 */
public class Esm7Results extends ToolResult {

    private final String target;
    private final String banner;

    public Esm7Results(boolean successfulRun, boolean vulnerabilityFound, int quantityFound, String resultsText,
                       String target, String banner, Collection<? extends Exploit> exploits) {
        super(successfulRun, vulnerabilityFound, quantityFound, resultsText, exploits);

        this.target = target;
        this.banner = banner;
    }

    public String getTarget() {
        return target;
    }

    public String getBanner() {
        return banner;
    }

    public String toString() {
        return ToStringBuilder.reflectionToString(this, ToStringStyle.SIMPLE_STYLE);
    }

    public static class DiscoveredInjection implements Exploit {
        private final String parameter;
        private final String dbms;
        private final String payload;
        private final String vector;

        public DiscoveredInjection(String parameter, String dbms, String payload,
                                   String vector) {
            this.parameter = parameter;
            this.dbms = dbms;
            this.payload = payload;
            this.vector = vector;
        }

        public String getParameter() {
            return parameter;
        }

        public String getDbms() {
            return dbms;
        }

        public String getPayload() {
            return payload;
        }

        public String getVector() {
            return vector;
        }

        public String toString() {
            return ToStringBuilder.reflectionToString(this, ToStringStyle.SIMPLE_STYLE);
        }
    }
}

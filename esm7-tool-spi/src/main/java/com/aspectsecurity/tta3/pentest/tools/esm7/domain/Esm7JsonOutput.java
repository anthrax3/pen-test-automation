package com.aspectsecurity.tta3.pentest.tools.esm7.domain;

/*
    Application Security Threat Attack Modeling (ASTAM)

    Copyright (C) 2017 Applied Visions - http://securedecisions.com

    Written by Aspect Security - http://aspectsecurity.com

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/

import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonParseException;

import java.lang.reflect.Type;
import java.util.List;

/**
 *
 */
public class Esm7JsonOutput {

    public static class DataResponseObject {
        public interface Value {}

        public static class TargetValue implements Value {
            String data;
            String query;
            String url;
        }

        public static class TechniquesValue implements Value {
            public static class ConfObject {
                String code;
                String notString;
                boolean optimize;
                String regexp;
                String string;
                boolean textOnly;
                boolean titles;
            }

            public static class DataObject {
                public static class InnerData {
                    String comment;
                    int falseCode;
                    double matchRatio;
                    String payload;
                    String templatePayload;
                    String title;
                    int trueCode;
                    String vector;
                    int where;
                }

            }

            List<Integer> clause;
            ConfObject conf;
            DataObject data;
            String dbms;
            String dbms_version;
            List<String> notes;
            String os;
            String parameter;
            String place;
            String prefix;
            int ptype;
            String suffix;
        }

        public static class BannerValue implements Value {
            String banner;
        }

        public static class DataObject {
            int status;
            int type;
            Value value;
        }

        List<DataObject> data;
        List<String> error;
        boolean success;
    }

    public static class LogResponseObject {
        public static class LogMessage {
            String level;
            String message;
            String time;
        }

        List<LogMessage> log;
        boolean success;
    }

    DataResponseObject data_response;
    LogResponseObject log_response;
}

class TechniquesDeserializer implements JsonDeserializer<Esm7JsonOutput.DataResponseObject.DataObject> {

    @Override
    public Esm7JsonOutput.DataResponseObject.DataObject deserialize(JsonElement jsonElement,
                                                                         Type type,
                                                                         JsonDeserializationContext jsonDeserializationContext) throws JsonParseException {

        int typeId = jsonElement.getAsJsonObject().getAsJsonPrimitive("type").getAsInt();

        switch (typeId) {
            case 0:
                break;
            case 1:
                break;
            case 3:
                break;
            default:


        }

        return null;
    }
}

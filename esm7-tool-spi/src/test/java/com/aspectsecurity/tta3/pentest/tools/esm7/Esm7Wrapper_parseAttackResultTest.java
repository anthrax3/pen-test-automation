package com.aspectsecurity.tta3.pentest.tools.esm7;

import com.aspectsecurity.astam.tta3.pentest.common.ExecutionResult;
import com.aspectsecurity.astam.tta3.pentest.common.ToolResult;
import com.aspectsecurity.tta3.pentest.tools.esm7.domain.SQLMapInjectionPoint;
import com.aspectsecurity.tta3.pentest.tools.esm7.domain.SQLMapResultSet;
import com.aspectsecurity.tta3.pentest.tools.esm7.domain.SQLMapResults;

import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ArrayList;

import static org.junit.jupiter.api.Assertions.*;

/*
    Application Security Threat Attack Modeling (ASTAM)

    Copyright (C) 2017 Applied Visions - http://securedecisions.com

    Written by Aspect Security - http://aspectsecurity.com

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/

class Esm7Wrapper_parseAttackResultTest {

    Esm7Wrapper esm7Wrapper;

    @org.junit.jupiter.api.BeforeEach
    void setUp()
    {
        esm7Wrapper = new Esm7Wrapper();
    }

    @org.junit.jupiter.api.Test
    void parseAttackResult_NoInjectionFound()
    {
        URI fileURI = null;

        try {
            fileURI = getClass().getClassLoader().getResource("sqlmap-no-injection-found.json").toURI();
        }
        catch (URISyntaxException e)
        {
            fail("Error getting test resource JSON.");
        }

        String fileContents = null;
        try {
            fileContents = new String(Files.readAllBytes(Paths.get(fileURI)), StandardCharsets.UTF_8);
        } catch (IOException e) {
            fail("Error reading test resource JSON");
        }

        ExecutionResult er = new ExecutionResult("","",0, fileContents);

        ToolResult toolResult = esm7Wrapper.parseAttackResult(null, er);

        assertTrue(toolResult.isSuccessfulRun());
        assertFalse(toolResult.isVulnerabilityFound());
        assertEquals(0, toolResult.getQuantityFound());

        assertEquals(toolResult.getResultsText(), "ESM-7 did not find any injection.");
    }

//    @org.junit.jupiter.api.Test
//    void parseAttackResult_Running()
//    {
//        URI fileURI = null;
//
//        try {
//            fileURI = getClass().getClassLoader().getResource("sqlmap-running.json").toURI();
//        }
//        catch (URISyntaxException e)
//        {
//            fail("Error getting test resource JSON.");
//        }
//
//        String filename = Paths.get(fileURI).toString();
//
//        ExecutionResult tr = new ExecutionResult("", filename);
//
//        ExecutionResult parsed = esm7Wrapper.parseAttackResult(null, tr);
//
//        assertFalse(parsed.successfulRun);
//        assertFalse(parsed.foundVulnerability);
//        assertEquals(0, parsed.quantityfound);
//
//        assertNull(parsed.resultsObject);
//    }
//
//    @org.junit.jupiter.api.Test
//    void parseAttackResult_Terminated()
//    {
//        URI fileURI = null;
//
//        try {
//            fileURI = getClass().getClassLoader().getResource("sqlmap-terminated.json").toURI();
//        }
//        catch (URISyntaxException e)
//        {
//            fail("Error getting test resource JSON.");
//        }
//
//        String filename = Paths.get(fileURI).toString();
//
//        ExecutionResult tr = new ExecutionResult("", filename);
//
//        ExecutionResult parsed = esm7Wrapper.parseAttackResult(null, tr);
//
//        assertFalse(parsed.successfulRun);
//        assertFalse(parsed.foundVulnerability);
//        assertEquals(0, parsed.quantityfound);
//
//        assertNull(parsed.resultsObject);
//    }

    @org.junit.jupiter.api.Test
    void parseAttackResult_FoundResults()
    {
        URI fileURI = null;

        try {
            fileURI = getClass().getClassLoader().getResource("sqlmap-found-results.json").toURI();
        }
        catch (URISyntaxException e)
        {
            fail("Error getting test resource JSON.");
        }

        String fileContents = null;
        try {
            fileContents = new String(Files.readAllBytes(Paths.get(fileURI)), StandardCharsets.UTF_8);
        } catch (IOException e) {
            fail("Error reading test resource JSON");
        }

        ExecutionResult er = new ExecutionResult("","",0, fileContents);

        ToolResult toolResult = esm7Wrapper.parseAttackResult(null, er);


        assertTrue(toolResult.isSuccessfulRun());
        assertTrue(toolResult.isVulnerabilityFound());
        assertNotEquals(0, toolResult.getQuantityFound());

        String expectedResultText = "";
        expectedResultText += "Discovered a total of 1 parameter + DBMS sets.";
        expectedResultText += " " + "An overall 1 injection points were identified.";

        assertNotNull(toolResult.getResultsText());
        assertEquals(expectedResultText, toolResult.getResultsText());


    }
}

package com.aspectsecurity.astam.tta3.pentest.execute.cqf;

/*
    Application Security Threat Attack Modeling (ASTAM)

    Copyright (C) 2017 Applied Visions - http://securedecisions.com

    Written by Aspect Security - http://aspectsecurity.com

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/

import com.aspectsecurity.astam.tta3.pentest.common.ExecutionResult;
import com.aspectsecurity.astam.tta3.pentest.common.ToolCommand;
import com.aspectsecurity.astam.tta3.pentest.common.Tta3Attack;
import com.aspectsecurity.astam.tta3.pentest.execute.CommandExecutor;
import com.aspectsecurity.astam.tta3.pentest.execute.ExecutionId;
import com.google.gson.*;
import com.secdec.astam.cqf.api.models.ExperimentDesignElementRef;
import com.secdec.astam.cqf.api.models.ExperimentElement;
import com.secdec.astam.cqf.api.models.ExperimentElementRef;
import com.secdec.astam.cqf.api.models.ParameterBinding;
import com.secdec.astam.cqf.api.rest.ExperimentsApi;
import com.secdec.astam.cqf.api.rest.io.ApiCallback;
import com.secdec.astam.cqf.api.rest.io.ApiClient;
import com.secdec.astam.cqf.api.rest.io.ApiException;
import com.secdec.astam.cqf.api.rest.io.Configuration;

import java.io.*;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.*;

/**
 *
 */
public class CqfExecutor implements CommandExecutor {

    private static final String DEBUG_URL = "http://localhost:34355/cqf/api/v1";

    private Map<ExecutionId, Boolean> executionStatuses = new HashMap<>();
    private Map<ExecutionId, ExecutionResult> executionResults = new HashMap<>();

    private boolean debug;
    private String cqfApiUrl;


    public CqfExecutor() {
        this(DEBUG_URL, true);
    }

    public CqfExecutor(String cqfApiUrl) {
        this(cqfApiUrl, false);
    }

    private CqfExecutor(String cqfApiUrl, boolean debug) {
        this.cqfApiUrl = cqfApiUrl;
        setDebug(debug);
    }

    @Override
    public ExecutionId execute(Tta3Attack attack, ToolCommand command) {

        // Setup Experiment design
        ExperimentDesignElementRef esm7DesignElementRef = new ExperimentDesignElementRef();

        // TODO: need to dynamically determine design archetype based on attack/application metadata
        attack.getApplicationMetadata();
        esm7DesignElementRef.setObjectKey("com.siegetechnologies.cqf.design.item.archetype.sql-injection");

        // BEGIN Experiment children setup

        // Set up attacker Experiment Element
        ExperimentElement attackerExperimentElement = new ExperimentElement();

        ExperimentDesignElementRef attackerElementDesignRef = new ExperimentDesignElementRef();
        // TODO make this a constant string
        attackerElementDesignRef.setObjectKey("com.siegetechnologies.cqf.design.item.attacker." + command.getToolExecutableName());
        attackerExperimentElement.design(attackerElementDesignRef);


        ParameterBinding attackConfParameterBinding = new ParameterBinding();
        // TODO make this a constant string
        attackConfParameterBinding.setName("attack_config_file_as_blob");
        attackConfParameterBinding.setValue(Base64.getEncoder().encodeToString(command.getFileContents()));
        attackerExperimentElement.parameterBindings(Collections.singletonList(attackConfParameterBinding));

        ExperimentElementRef attackerExperimentElementRef = new ExperimentElementRef();
        attackerExperimentElementRef.setObject(attackerExperimentElement);

        // Set up attackee Experiment Element
        ExperimentElement attackeeExperimentElement = new ExperimentElement();

        ExperimentDesignElementRef attackeeElementDesignRef = new ExperimentDesignElementRef();
        // TODO: need to dynamically determine attack target based on attack/application metadata
        attack.getApplicationMetadata();
        attackeeElementDesignRef.setObjectKey("com.siegetechnologies.cqf.design.item.software.dotCMS");

        attackeeExperimentElement.design(attackeeElementDesignRef);

        ExperimentElementRef attackeeExperimentElementRef = new ExperimentElementRef();
        attackeeExperimentElementRef.setObject(attackeeElementDesignRef);

        // Set up database Experiment Element
        ExperimentElement databaseExperimentElement = new ExperimentElement();

        ExperimentDesignElementRef databaseElementDesignRef = new ExperimentDesignElementRef();
        // TODO: need to dynamically determine attack target based on attack/application metadata
        attack.getApplicationMetadata();
        databaseElementDesignRef.setObjectKey("com.siegetechnologies.cqf.design.item.database.mysql");

        ExperimentElementRef databaseExperimentElementRef = new ExperimentElementRef();
        databaseExperimentElementRef.setObject(databaseElementDesignRef);

        // END Experiment children setup

        ExperimentElement experimentElement = new ExperimentElement();

        experimentElement.design(esm7DesignElementRef);
        experimentElement.children(Arrays.asList(attackerExperimentElementRef, attackeeExperimentElementRef, databaseExperimentElementRef));

        ExperimentsApi experimentsApi = new ExperimentsApi();

        ExecutionId id = new ExecutionId();
        executionStatuses.put(id, false);
        executionResults.put(id, null);

        try {
            final CqfExecutor.DebugServer debugServer = new CqfExecutor.DebugServer();
            if (debug) {
                debugServer.start();
            }

            experimentsApi.createAndExecuteExperimentAsync(experimentElement, new ApiCallback<ExperimentElement>() {
                @Override
                public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {
                    if (debug) {
                        ExecutionResult executionResult = new ExecutionResult(debugServer.getCapturedRequestString(), "",
                                0, "");

                        executionResults.put(id, executionResult);
                        executionStatuses.put(id, true);
                    } else {
                        StringWriter stringWriter = new StringWriter();
                        e.printStackTrace(new PrintWriter(stringWriter));
                        ExecutionResult executionResult = new ExecutionResult(e.toString(), stringWriter.toString(),
                                -1, "");

                        executionResults.put(id, executionResult);
                        executionStatuses.put(id, true);
                    }
                }

                @Override
                public void onSuccess(ExperimentElement result, int statusCode, Map<String, List<String>> responseHeaders) {
                    if (debug) {
                        ExecutionResult executionResult = new ExecutionResult(debugServer.getCapturedRequestString(), "",
                                0, "");

                        executionResults.put(id, executionResult);
                        executionStatuses.put(id, true);
                    } else {

                        // TODO: need to confirm with Siege what the results are
                        /*
                               initialize, run, retrieve_data, cleanup, done
                         */
                        result.getExecution().getPhase();
                        result.getExecution().getResults();

                        ExecutionResult executionResult = new ExecutionResult(result.getExecution().getResults().toString(), "",
                                0, "");

                        executionResults.put(id, executionResult);
                        executionStatuses.put(id, true);
                    }
                }

                @Override
                public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {

                }

                @Override
                public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {

                }
            });
        } catch (ApiException ae) {
            // TODO: implement real error handling
            throw new RuntimeException(ae);
        }

        return id;
    }

    @Override
    public boolean isFinished(ExecutionId executionId) {
//        if (!(executionId instanceof CqfExecutionId)) {
//            throw new IllegalArgumentException("Unrecognized execution id");
//        }
//
//        // TODO: need to confirm with Siege what the Phase is for a completed task
//        return "complete".equals(((CqfExecutionId) executionId).getExecutionState().getPhase());

        return executionStatuses.get(executionId);
    }

    @Override
    public ExecutionResult getResult(ExecutionId executionId) {
//        if (!(executionId instanceof CqfExecutionId)) {
//            throw new IllegalArgumentException("Unrecognized execution id");
//        }
//
//        // TODO: need to confirm with Siege what the results are
//        return new ExecutionResult(((CqfExecutionId) executionId).getExecutionState().getResults().toString());

        return executionResults.get(executionId);
    }

    public static class DebugServer extends Thread {

        private StringBuilder capturedRequest = new StringBuilder();

        private final int port;

        public DebugServer() {
            this(34355);
        }

        public DebugServer(int port) {
            this.port = port;
        }

        @Override
        public void run() {
            // setup a local socket to "trap" command
            try (ServerSocket socket = new ServerSocket(port); Socket clientSocket = socket.accept()) {
                PrintWriter out =
                        new PrintWriter(clientSocket.getOutputStream(), true);

                BufferedReader bufferedInputStream = new BufferedReader(new InputStreamReader(clientSocket.getInputStream()));

                String line;
                int contentLength = 0;

                // Read off HTTP header lines until double new line
                while ( (line = bufferedInputStream.readLine()) != null) {
                    capturedRequest.append(line);
                    capturedRequest.append("\n");

                    // capture content-length so we know how much to read
                    if (line.toLowerCase().startsWith("content-length")) {
                        String[] splitLine = line.split(":");
                        contentLength = Integer.parseInt(splitLine[splitLine.length-1].trim());
                    }

                    if ("".equals(line)) {
                        break;
                    }
                }
                char[] body = new char[contentLength];
                int read = bufferedInputStream.read(body, 0, body.length);

                String bodyString;

                if (read < 0) {
                    bodyString = new String(body);
                } else {
                    bodyString = new String( body, 0, read );
                }

                try {
                    // try to pretty up the response for display
                    bodyString = new GsonBuilder().setPrettyPrinting().create().toJson(new JsonParser().parse(bodyString));
                } catch (JsonSyntaxException jse) {
                    // if there's an exception, just keep bodyString as unformatted.
                }

                capturedRequest.append(bodyString);

                clientSocket.close();
                socket.close();

                return;
            } catch (IOException ioe) {
                ioe.printStackTrace();
            }
        }

        public String getCapturedRequestString() {
            return capturedRequest.toString();
        }
    }

    public void setCqfApiUrl(String cqfApiUrl) {
        this.cqfApiUrl = cqfApiUrl;
    }

    public void setDebug(boolean debug) {
        this.debug = debug;
        if (debug) {
            ApiClient c = new ApiClient().setBasePath(DEBUG_URL);
            Configuration.setDefaultApiClient(c);

        } else {
            ApiClient c = new ApiClient().setBasePath(cqfApiUrl);
            Configuration.setDefaultApiClient(c);
        }
    }
}

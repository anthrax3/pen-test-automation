package com.aspectsecurity.astam.tta3.pentest.execute.cqf;

/*
    Application Security Threat Attack Modeling (ASTAM)

    Copyright (C) 2017 Applied Visions - http://securedecisions.com

    Written by Aspect Security - http://aspectsecurity.com

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/

import com.secdec.astam.cqf.api.models.*;
import com.secdec.astam.cqf.api.rest.*;
import com.secdec.astam.cqf.api.rest.io.ApiClient;
import com.secdec.astam.cqf.api.rest.io.ApiException;
import com.secdec.astam.cqf.api.rest.io.Configuration;

import java.util.Arrays;
import java.util.Collections;

/**
 *
 */
public class CqfExecutorTest {

    public static void main(String[] args) throws ApiException {

        ApiClient c = new ApiClient().setBasePath("http://localhost:8081/cqf/api/v1");

        Configuration.setDefaultApiClient(c);

        // Setup Experiment design
        ExperimentDesignElementRef esm7DesignElementRef = new ExperimentDesignElementRef();
        esm7DesignElementRef.setObjectKey("com.siegetechnologies.cqf.design.item.archetype.sql-injection");

        // BEGIN Experiment children setup

        // Set up attacker Experiment Element
        ExperimentElement attackerExperimentElement = new ExperimentElement();

        ExperimentDesignElementRef attackerElementDesignRef = new ExperimentDesignElementRef();
        attackerElementDesignRef.setObjectKey("com.siegetechnologies.cqf.design.item.software.esm-7");

        ParameterBinding attackConfParameterBinding = new ParameterBinding();
        attackConfParameterBinding.setName("attack_config_file_as_blob");
        attackConfParameterBinding.setValue("base64Encoded(attack.conf.file)");

        attackerExperimentElement.design(attackerElementDesignRef);
        attackerExperimentElement.parameterBindings(Collections.singletonList(attackConfParameterBinding));

        ExperimentElementRef attackerExperimentElementRef = new ExperimentElementRef();
        attackerExperimentElementRef.setObject(attackerExperimentElement);


        // Set up attackee Experiment Element
        ExperimentElement attackeeExperimentElement = new ExperimentElement();

        ExperimentDesignElementRef attackeeElementDesignRef = new ExperimentDesignElementRef();
        attackeeElementDesignRef.setObjectKey("com.siegetechnologies.cqf.design.item.software.dotCMS");

        attackeeExperimentElement.design(attackeeElementDesignRef);

        ExperimentElementRef attackeeExperimentElementRef = new ExperimentElementRef();
        attackeeExperimentElementRef.setObject(attackeeElementDesignRef);

        // Set up database Experiment Element
        ExperimentElement databaseExperimentElement = new ExperimentElement();

        ExperimentDesignElementRef databaseElementDesignRef = new ExperimentDesignElementRef();
        databaseElementDesignRef.setObjectKey("com.siegetechnologies.cqf.design.item.software.mysql");

        ExperimentElementRef databaseExperimentElementRef = new ExperimentElementRef();
        databaseExperimentElementRef.setObject(databaseElementDesignRef);

        // END Experiment children setup


        ExperimentElement experimentElement = new ExperimentElement();

        experimentElement.design(esm7DesignElementRef);
        experimentElement.children(Arrays.asList(attackerExperimentElementRef, attackeeExperimentElementRef, databaseExperimentElementRef));

        System.out.println(experimentElement);

        ExperimentsApi experimentsApi = new ExperimentsApi();

        experimentsApi.createAndExecuteExperiment(experimentElement);
    }

}

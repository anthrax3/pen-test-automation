package com.aspectsecurity.astam.tta3.pentest.tools.spi;

import com.aspectsecurity.astam.tta3.pentest.common.ToolCommand;
import com.aspectsecurity.astam.tta3.pentest.common.ExecutionResult;
import com.aspectsecurity.astam.tta3.pentest.common.ToolResult;
import com.aspectsecurity.astam.tta3.pentest.common.Tta3Attack;

import java.util.Set;

/*
    Application Security Threat Attack Modeling (ASTAM)

    Copyright (C) 2017 Applied Visions - http://securedecisions.com

    Written by Aspect Security - http://aspectsecurity.com

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/
/**
 * Interface that defines the Tool Wrapper SPI for TTA3 Pen Test Automation Platform. By implementing this interface
 * and properly registering the provider, the TTA3 Pen Test Automation Platform can become aware of and utilize the
 * wrapped tool.
 *
 * @author Aspect Security
 */
public interface ToolWrapper {

    /**
     * Returns the name of the wrapped tool.
     *
     * @return the name of the wrapped tool.
     */
    public String getToolName();

    /**
     * Returns the set of ToolParameters that are supported by the wrapped tool. This set should be passed by reference
     * so that modifications to the parameters within the returned set affect the state of parameters in the wrapper
     * instance.
     *
     * @return the set of ToolParameters that are supported by the wrapped tool.
     */
    public Set<ToolParameter> getToolParameters();

    /**
     * Returns the set of attacks supported by the wrapped tool. If no attacks are supported, the method must return an
     * empty set (not null). These attacks should generally be referred to by a CAPEC ID but this pattern is not
     * enforced for flexibility so that other standards could be referenced (e.g. OWASP Testing Guide).
     * The attacks are in the form of Strings to support future expansion (e.g. MITRE adds a new CAPEC).
     *
     * @return the set of attacks supported by the wrapped tool. If no attacks are supported, the method must return an
     * empty set (not null).
     *
     * @see <a href="https://capec.mitre.org/">MITRE CAPEC</a>
     */
    public Set<String> getSupportedAttacks();

//    /**
//     * Returns the normalized result of a given executed attack. This method processes the given output of the wrapped
//     * tool and produces a normalized result that can be used by the TTA3 Pen Test Automation Platform.
//     *
//     * @param attack the normalized attack that was executed.
//     * @param toolOutput an array of String outputs from the tool.
//     * @return the normalized result of an executed attack.
//     * @deprecated
//     */
//    public String parseAttackResult(Tta3Attack attack, String toolOutput);

    /**
     * Returns the normalized result of a given executed attack. This method processes the given output of the wrapped
     * tool and produces a normalized result that can be used by the TTA3 Pen Test Automation Platform.
     *
     * @param attack the normalized attack that was executed.
     * @param executionResult completed ExecutionResult, including stdio, stderr, etc.
     * @return the normalized result of an executed attack.
     */
    public ToolResult parseAttackResult(Tta3Attack attack, ExecutionResult executionResult);

    /**
     * Returns the command to execute the given attack using the wrapped tool. This method processes the normalized
     * attack along with any application configuration parameters set by reference in order to generate the command
     * that must be issued to the wrapped tool to execute the given attack.
     *
     * @param attack the normalized attack to be executed.
     * @return the command to execute the given attack using the wrapped tool.
     */
    public ToolCommand generateToolCommand(Tta3Attack attack);

    default boolean isSuccessfulExit(ExecutionResult executionResult) {
        return (executionResult.getExitCode() == 0);
    }
}

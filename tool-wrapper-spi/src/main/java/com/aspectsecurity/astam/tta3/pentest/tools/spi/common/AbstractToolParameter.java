package com.aspectsecurity.astam.tta3.pentest.tools.spi.common;

import com.aspectsecurity.astam.tta3.pentest.tools.spi.ToolParameter;
import com.google.common.reflect.TypeToken;
import org.apache.commons.lang3.builder.ToStringBuilder;

import java.lang.reflect.Type;

/*
    Application Security Threat Attack Modeling (ASTAM)

    Copyright (C) 2017 Applied Visions - http://securedecisions.com

    Written by Aspect Security - http://aspectsecurity.com

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/
public abstract class AbstractToolParameter<T> implements ToolParameter<T> {

    private final TypeToken<T> typeToken = new TypeToken<T>(getClass()) { };

    private final String paramName;
    private final String description;
    private final boolean isRequired;
    private final String configFileParamName;  // XXX DELETE ???
    private T value;

    protected AbstractToolParameter(String paramName, String description, boolean isRequired) {
        this.paramName = paramName;
        this.description = description;
        this.isRequired = isRequired;
        this.configFileParamName = "config_param_name_not_set";
    }
/*
    protected AbstractToolParameter(String paramName, String configFileParamName, String description, boolean isRequired) {
        this.paramName = paramName;
        this.description = description;
        this.isRequired = isRequired;
        this.configFileParamName = configFileParamName;
    }
*/
    public final String getParamName() {
        return this.paramName;
    }

    public final String getConfigFileParamName() {
        return this.configFileParamName;
    }

    public final String getParamDescription() {
        return this.description;
    }

    public final T getValue() {
        return value;
    }

    public final boolean isRequired() { return isRequired; }

    public final void setValue(T value) {
        this.value = value;
    }

    public final Type getParamType() {
        return typeToken.getType();
    }

    @Override
    public String toString() {
        return new ToStringBuilder(this).
                append("paramName", paramName).
                append("description", description).
                append("isRequired", isRequired).
                toString();
    }

    public String generateShellConfigLine() {
        StringBuffer ret = new StringBuffer();
        ret.append(getParamName()).append("='").append(getValue().toString().replaceAll("'","\\\\'")).append("'\n");
        return ret.toString();
    }
}

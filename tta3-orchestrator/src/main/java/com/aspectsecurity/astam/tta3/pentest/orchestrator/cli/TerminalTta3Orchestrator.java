package com.aspectsecurity.astam.tta3.pentest.orchestrator.cli;

/*
    Application Security Threat Attack Modeling (ASTAM)

    Copyright (C) 2017 Applied Visions - http://securedecisions.com

    Written by Aspect Security - http://aspectsecurity.com

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/


import com.aspectsecurity.astam.tta3.pentest.command.ToolCommandGenerator;
import com.aspectsecurity.astam.tta3.pentest.common.ExecutionResult;
import com.aspectsecurity.astam.tta3.pentest.common.ToolCommand;
import com.aspectsecurity.astam.tta3.pentest.common.ToolResult;
import com.aspectsecurity.astam.tta3.pentest.common.Tta3Attack;
import com.aspectsecurity.astam.tta3.pentest.execute.CommandExecutor;
import com.aspectsecurity.astam.tta3.pentest.execute.ExecutionId;
import com.aspectsecurity.astam.tta3.pentest.execute.cli.CliExecutor;
import com.aspectsecurity.astam.tta3.pentest.execute.cqf.CqfExecutor;
import com.aspectsecurity.astam.tta3.pentest.tools.spi.ToolParameter;
import com.aspectsecurity.astam.tta3.pentest.tools.spi.ToolWrapper;
import com.googlecode.lanterna.TerminalSize;
import com.googlecode.lanterna.TextColor;
import com.googlecode.lanterna.gui2.*;
import com.googlecode.lanterna.gui2.Button;
import com.googlecode.lanterna.gui2.GridLayout;
import com.googlecode.lanterna.gui2.Label;
import com.googlecode.lanterna.gui2.Panel;
import com.googlecode.lanterna.gui2.Window;
import com.googlecode.lanterna.gui2.dialogs.MessageDialog;
import com.googlecode.lanterna.gui2.dialogs.MessageDialogButton;
import com.googlecode.lanterna.gui2.dialogs.TextInputDialog;
import com.googlecode.lanterna.input.KeyStroke;
import com.googlecode.lanterna.input.KeyType;
import com.googlecode.lanterna.screen.Screen;
import com.googlecode.lanterna.screen.TerminalScreen;
import com.googlecode.lanterna.terminal.DefaultTerminalFactory;
import com.googlecode.lanterna.terminal.Terminal;

import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import java.nio.charset.StandardCharsets;
import java.util.*;

/**
 *
 */
public class TerminalTta3Orchestrator {

    private static final Map<String, String> MOCK_DATA = new HashMap<>();
    static {
        // The path/query part of URL would come from a DAST Finding. Alternatively, if a PotentialAttack indicated
        // a use case for a component, could come from interactive prompting for the URL of that use case.
        //MOCK_DATA.put("sqliURL", "http://target.example.com:8080/JSONTags?start=0&count=10&sort=tagname");
        MOCK_DATA.put("sqliURL", "http://localhost:8080/JSONTags?start=0&count=10&sort=tagname");

        // This would have to come deus ex machina until we have a fully functional pen test analyst workbench
        //MOCK_DATA.put("loginURL", "http://target.example.com:8080/admin");
        MOCK_DATA.put("loginURL", "http://localhost:8080/admin");


        // This probably wouldn't come in at all but hard coding it to save time during demo as it cuts down on
        // unnecessary testing
        MOCK_DATA.put("sqliParam", "sort");

        // mock data below here is for CAPEC-16

        MOCK_DATA.put("username", "bill@dotcms.com");
        //MOCK_DATA.put("host", "127.0.0.1");
        MOCK_DATA.put("host", "localhost");
        MOCK_DATA.put("port", "8080");
        MOCK_DATA.put("useTLS", "0");
        MOCK_DATA.put("uripath", "/c/portal_public/login");
        MOCK_DATA.put("formdata", "my_account_cmd=auth&referer=%2Fc&my_account_r_m=false&password=^PASS^&my_account_login=^USER^&my_account_email_address=");
        MOCK_DATA.put("msgsuccess", "Processing login...");
        MOCK_DATA.put("dictionaryfile","sample-dictionary-02.txt");

        // Temporary so we have something to test on before we fully figure out dotCMS XSS
        //MOCK_DATA.put("xssURL", "http://localhost:8080/");
        MOCK_DATA.put("xssURL", "http://localhost/");
    }

    private static final Set<String> MOCK_APPS = new HashSet<>();
    static {
        MOCK_APPS.add("dotCMS");
    }

    private static final String TITLE = "TTA3 Orchestrator Demo";

    // Create window to hold the panel
    private BasicWindow capecWindow = new BasicWindow();
    private BasicWindow attackWindow = new BasicWindow();
    private BasicWindow commandWindow = new BasicWindow();
    private BasicWindow executeWindow = new BasicWindow();
    private BasicWindow resultWindow = new BasicWindow();

    private String capecId;
    private Tta3Attack tta3Attack;
    private ToolWrapper selectedTool;
    private ToolCommand toolCommand;
    private CommandExecutor commandExecutor;
    private ExecutionResult executionResult;
    private ToolResult toolResult;

    private MultiWindowTextGUI gui;

    public TerminalTta3Orchestrator(Screen screen) {
        gui = new MultiWindowTextGUI(screen, TextColor.ANSI.BLUE);
    }

    public void start() {
        showNewToolWindow();
    }

    public static void main(String[] args) throws IOException {
        // Setup terminal and screen layers
        TerminalSize size = new TerminalSize(80,50);  // unsure how to do this.
        Terminal terminal = new DefaultTerminalFactory().createTerminal();
        Screen screen = new TerminalScreen(terminal);
        /// ???.setPreferredSize(new TerminalSize(20, 5))

        try {
            screen.startScreen();
            TerminalTta3Orchestrator terminalTta3Orchestrator = new TerminalTta3Orchestrator(screen);
            terminalTta3Orchestrator.start();
        } finally {
            screen.stopScreen();
            terminal.close();
        }
    }

    private void showNewToolWindow() {
        Panel mainPanel = new Panel(new GridLayout(3));

        Label capecLabel = new Label("Supported CAPECs:");
        ComboBox<String> capecComboBox = new ComboBox<>();

        Label targetLabel = new Label("Target Application:");

        Label capecStatusLabel = new Label(" ");
        capecStatusLabel.setForegroundColor(TextColor.ANSI.RED);

        Label targetStatusLabel = new Label(" ");
        targetStatusLabel.setForegroundColor(TextColor.ANSI.RED);

        capecComboBox.addListener(new ComboBox.Listener() {
            @Override
            public void onSelectionChanged(int selectedIndex, int previousSelection) {
                if (previousSelection >=0 && selectedIndex >= 0) {
                    capecStatusLabel.setText("");
                }
            }
        });

        ComboBox<String> targetComboBox = new ComboBox<>();
        targetComboBox.addListener(new ComboBox.Listener() {
            @Override
            public void onSelectionChanged(int selectedIndex, int previousSelection) {
                if (previousSelection >=0 && selectedIndex >= 0) {
                    targetStatusLabel.setText("");
                }
            }
        });

        // attack pattern, application architecture, threat agent, use case, data flow,
        // functionality, components, and assets.
        Label applicationArchitectureLabel = new Label("Architecture: ");
        applicationArchitectureLabel.setForegroundColor(TextColor.ANSI.BLUE);
        Label applicationArchitectureValueLabel = new Label("");
        applicationArchitectureValueLabel.setForegroundColor(TextColor.ANSI.BLUE);

        Label applicationCompositionLabel = new Label("Composition: ");
        applicationCompositionLabel.setForegroundColor(TextColor.ANSI.BLUE);
        Label applicationCompositionValueLabel = new Label("");
        applicationCompositionValueLabel.setForegroundColor(TextColor.ANSI.BLUE);

        Label threatAgentLabel = new Label("Threat Agent: ");
        threatAgentLabel.setForegroundColor(TextColor.ANSI.BLUE);
        Label threatAgentValueLabel = new Label("");
        threatAgentValueLabel.setForegroundColor(TextColor.ANSI.BLUE);

        Label useCaseLabel = new Label("Use Cases: ");
        useCaseLabel.setForegroundColor(TextColor.ANSI.BLUE);
        Label useCaseValueLabel = new Label("");
        useCaseValueLabel.setForegroundColor(TextColor.ANSI.BLUE);

        // Add a row of white space
        mainPanel.addComponent(new EmptySpace(), GridLayout.createHorizontallyFilledLayoutData(3));

        // Show CAPCE Label, selected CAPEC, and a status message
        mainPanel.addComponent(capecLabel,
                GridLayout.createLayoutData(GridLayout.Alignment.END, GridLayout.Alignment.CENTER));
        mainPanel.addComponent(capecComboBox,
                GridLayout.createLayoutData(GridLayout.Alignment.END, GridLayout.Alignment.CENTER));
        mainPanel.addComponent(capecStatusLabel, GridLayout.createLayoutData(GridLayout.Alignment.END, GridLayout.Alignment.CENTER));

        // Add a row of white space
        mainPanel.addComponent(new EmptySpace(), GridLayout.createHorizontallyFilledLayoutData(3));

        // Show target Label, selected target app, and a status message
        mainPanel.addComponent(targetLabel,
                GridLayout.createLayoutData(GridLayout.Alignment.END, GridLayout.Alignment.CENTER));
        mainPanel.addComponent(targetComboBox,
                GridLayout.createLayoutData(GridLayout.Alignment.BEGINNING, GridLayout.Alignment.CENTER));
        mainPanel.addComponent(targetStatusLabel, GridLayout.createLayoutData(GridLayout.Alignment.END, GridLayout.Alignment.CENTER));

        // Add a row of white space
        mainPanel.addComponent(new EmptySpace(), GridLayout.createHorizontallyFilledLayoutData(3));

        // Show application architecture metadata information
        mainPanel.addComponent(applicationArchitectureLabel,
                GridLayout.createLayoutData(GridLayout.Alignment.END, GridLayout.Alignment.CENTER));
        mainPanel.addComponent(applicationArchitectureValueLabel,
                GridLayout.createHorizontallyFilledLayoutData(2));

        // Show application composition metadata information
        mainPanel.addComponent(applicationCompositionLabel,
                GridLayout.createLayoutData(GridLayout.Alignment.END, GridLayout.Alignment.CENTER));
        mainPanel.addComponent(applicationCompositionValueLabel,
                GridLayout.createHorizontallyFilledLayoutData(2));

        // Show threat agent metadata information
        mainPanel.addComponent(threatAgentLabel,
                GridLayout.createLayoutData(GridLayout.Alignment.END, GridLayout.Alignment.CENTER));
        mainPanel.addComponent(threatAgentValueLabel,
                GridLayout.createHorizontallyFilledLayoutData(2));

        // Show use case metadata information
        mainPanel.addComponent(useCaseLabel,
                GridLayout.createLayoutData(GridLayout.Alignment.END, GridLayout.Alignment.CENTER));
        mainPanel.addComponent(useCaseValueLabel,
                GridLayout.createHorizontallyFilledLayoutData(2));

        // Create bottom button panel for four buttons
        Panel buttonPanel = new Panel(new GridLayout(4));

        // Exit Button
        Button exitButton = new Button("Exit", new Runnable() {
            @Override
            public void run() {
                System.exit(0);
            }
        });
        buttonPanel.addComponent(exitButton,
                GridLayout.createLayoutData(GridLayout.Alignment.CENTER, GridLayout.Alignment.CENTER,true, false));

        // Load Tool Button
        Button loadToolPluginButton = new Button("Load Tool Plugin(s)", new Runnable() {
            @Override
            public void run() {
                ToolCommandGenerator.getInstance().reloadTools();

                capecComboBox.clearItems();
                ToolCommandGenerator.getInstance().getSupportedCapecs()
                        .forEach(capec -> capecComboBox.addItem(capec));
                capecStatusLabel.setText("(loaded)");

            }
        });
        buttonPanel.addComponent(loadToolPluginButton,
                GridLayout.createLayoutData(GridLayout.Alignment.CENTER, GridLayout.Alignment.CENTER,true, false));

        // Load Apps Button
        Button loadAppsButton = new Button("Load Apps", new Runnable() {
            @Override
            public void run() {
                targetComboBox.clearItems();
                getApps().forEach(app -> targetComboBox.addItem(app));
                targetStatusLabel.setText("(loaded)");

                // TODO: Mocked data. Eventually derive from Application Registration
                applicationArchitectureValueLabel.setText("Web Application");
                applicationCompositionValueLabel.setText("Struts v1");
                threatAgentValueLabel.setText("Malicious User");
                useCaseValueLabel.setText("REST-based Content Save");
            }
        });
        buttonPanel.addComponent(loadAppsButton,
                GridLayout.createLayoutData(GridLayout.Alignment.CENTER, GridLayout.Alignment.CENTER,true, false));

        // OK Button
        Button okButton = new Button("OK", new Runnable() {
            @Override
            public void run() {

                // Populate error status message if no app target selected
                if (targetComboBox.getSelectedIndex() < 0) {
                    targetStatusLabel.setText("(no target selected)");
                }

                // Populate error status message if no CAPEC selected
                if (capecComboBox.getSelectedIndex() < 0) {
                    capecStatusLabel.setText("(no CAPEC selected)");
                }

                // If CAPEC and app target selected, proceed to next step
                if (targetComboBox.getSelectedIndex() >= 0 && capecComboBox.getSelectedIndex() >= 0 ) {

                    selectedTool = ToolCommandGenerator.getInstance().getToolForCapec(capecComboBox.getSelectedItem()).iterator().next();

                    capecId = capecComboBox.getSelectedItem();

                    MessageDialogButton selection = MessageDialog.showMessageDialog(gui, "Tool Selection",
                            selectedTool.getToolName()
                                    + " tool has been automatically selected for "
                                    + capecComboBox.getSelectedItem()
                                    + " due to:\n"
                                    + "\t* Application Architecture: Web Application\n"
                                    + "\t* Application Composition: Struts v1\n"
                                    + "\t* Threat Agent: Malicious User\n"
                                    + "\t* Use Case: REST-based content save",

                            MessageDialogButton.OK, MessageDialogButton.Cancel);

                    if (selection == MessageDialogButton.OK) {
                        showNewAttackWindow();
                    }
                }
            }
        });
        buttonPanel.addComponent(okButton,
                GridLayout.createLayoutData(GridLayout.Alignment.CENTER, GridLayout.Alignment.CENTER,true, false));

        Panel toolPanel = new Panel(new GridLayout(1));

        toolPanel.addComponent(mainPanel, GridLayout.createLayoutData(GridLayout.Alignment.CENTER, GridLayout.Alignment.BEGINNING, true, true));
        toolPanel.addComponent(buttonPanel, GridLayout.createLayoutData(GridLayout.Alignment.CENTER, GridLayout.Alignment.CENTER));

        capecWindow.setSize(new TerminalSize(140,80));
        capecWindow.setHints(Arrays.asList(Window.Hint.CENTERED, Window.Hint.EXPANDED));
        capecWindow.setComponent(toolPanel);
        capecWindow.setTitle(TITLE + " - Setup");

        if (gui.getActiveWindow() != null) {
            gui.removeWindow(gui.getActiveWindow());
        }

        gui.addWindowAndWait(capecWindow);
        gui.getScreen().doResizeIfNecessary();
    }

    private void showNewAttackWindow() {
        class ParameterComponentRow {
            final Label toolParameterLabel;
            final TextBox toolParameterTextBox;
            final Label toolParameterDescription;
            final Label toolParameterStatusLabel;


            ParameterComponentRow(Label toolParameterLabel, TextBox toolParameterTextBox,
                                  Label toolParameterDescription, Label toolParameterStatusLabel) {
                this.toolParameterLabel = toolParameterLabel;
                this.toolParameterTextBox = toolParameterTextBox;
                this.toolParameterDescription = toolParameterDescription;
                this.toolParameterStatusLabel = toolParameterStatusLabel;
            }
        }

        Panel mainPanel = new Panel(new GridLayout(3));

        Label parametersLabel = new Label(selectedTool.getToolName() + " supports the following parameters:");

        mainPanel.addComponent(parametersLabel, GridLayout.createHorizontallyFilledLayoutData(3));

        if (selectedTool.getToolParameters().isEmpty()) {
            mainPanel.addComponent(new EmptySpace(), GridLayout.createHorizontallyFilledLayoutData(3));

            mainPanel.addComponent(new Label("No parameters"));
            mainPanel.addComponent(new EmptySpace());
            mainPanel.addComponent(new EmptySpace());
        } else {
            mainPanel.addComponent(new EmptySpace(), GridLayout.createHorizontallyFilledLayoutData(3));
        }

        Map<ToolParameter, ParameterComponentRow> toolParameterParameterComponentRowMap = new HashMap<>();

        for (ToolParameter toolParameter : selectedTool.getToolParameters()) {
            Label toolParameterLabel = new Label(toolParameter.getParamName());
            Label toolParameterDescription = new Label(toolParameter.getParamDescription());
            Label toolParameterAutoLoadLabel = new Label("");
            toolParameterAutoLoadLabel.setForegroundColor(TextColor.ANSI.RED);

            TextBox toolParameterTextBox = new TextBox(new TerminalSize(50, 1)) {
                @Override
                public synchronized Result handleKeyStroke(KeyStroke keyStroke) {
                    if (keyStroke.getKeyType() == KeyType.Backspace || keyStroke.getKeyType() == KeyType.Delete
                            || keyStroke.getCharacter() != null && keyStroke.getCharacter() != '\t') {
                        toolParameterAutoLoadLabel.setText("");
                    }
                    return super.handleKeyStroke(keyStroke);
                }
            };

            toolParameterParameterComponentRowMap.put(toolParameter, new ParameterComponentRow(toolParameterLabel,
                    toolParameterTextBox, toolParameterDescription, toolParameterAutoLoadLabel));

            mainPanel.addComponent(toolParameterLabel,
                    GridLayout.createLayoutData(GridLayout.Alignment.BEGINNING, GridLayout.Alignment.CENTER));
            mainPanel.addComponent(toolParameterTextBox,
                    GridLayout.createLayoutData(GridLayout.Alignment.BEGINNING, GridLayout.Alignment.CENTER));
            mainPanel.addComponent(toolParameterAutoLoadLabel,
                    GridLayout.createLayoutData(GridLayout.Alignment.BEGINNING, GridLayout.Alignment.CENTER, true, false));

            mainPanel.addComponent(new EmptySpace(),
                    GridLayout.createLayoutData(GridLayout.Alignment.END, GridLayout.Alignment.CENTER));
            mainPanel.addComponent(toolParameterDescription,
                    GridLayout.createHorizontallyFilledLayoutData(2));

            mainPanel.addComponent(new EmptySpace(), GridLayout.createHorizontallyFilledLayoutData(3));
        }

        Panel buttonPanel = new Panel(new GridLayout(3));

        Button backButton = new Button("Back", new Runnable() {
            @Override
            public void run() {
                gui.removeWindow(attackWindow);
                gui.addWindowAndWait(capecWindow);
                gui.getScreen().doResizeIfNecessary();
            }
        });
        buttonPanel.addComponent(backButton,
                GridLayout.createLayoutData(GridLayout.Alignment.CENTER, GridLayout.Alignment.CENTER,true, false));

        Button deriveButton = new Button("Derive Parameters", new Runnable() {
            @Override
            public void run() {
                toolParameterParameterComponentRowMap.keySet().stream()
                        .forEach(p -> {
                            String value = getMetadata().get(p.getParamName());
                            if (value != null) {
                                ParameterComponentRow row = toolParameterParameterComponentRowMap.get(p);
                                row.toolParameterTextBox.setText(value);
                                row.toolParameterStatusLabel.setText("(derived)");

                            } } );
            }
        });
        buttonPanel.addComponent(deriveButton,
                GridLayout.createLayoutData(GridLayout.Alignment.CENTER, GridLayout.Alignment.CENTER,true, false));

        Button okButton = new Button("OK", new Runnable() {
            @Override
            public void run() {
                boolean flag = false;

                for (ToolParameter toolParameter : selectedTool.getToolParameters()) {
                    ParameterComponentRow row = toolParameterParameterComponentRowMap.get(toolParameter);
                    String value = row.toolParameterTextBox.getText();
                    if ("".equals(value)) {
                        if (toolParameter.isRequired()) {
                            row.toolParameterStatusLabel.setText("(required)");
                            flag = true;
                        }
                    } else {
                        toolParameter.setValue(value);
                        if (!toolParameter.isValid()) {
                            row.toolParameterStatusLabel.setText("(invalid)");
                            flag = true;
                        }
                    }
                }

                if (!flag) {
                    tta3Attack = new Tta3Attack(capecId, getMetadata());
                    showNewCommandWindow();
                }
            }
        });
        buttonPanel.addComponent(okButton,
                GridLayout.createLayoutData(GridLayout.Alignment.CENTER, GridLayout.Alignment.CENTER,true, false));

        Panel attackPanel = new Panel(new GridLayout(1));

        attackPanel.addComponent(new EmptySpace(), GridLayout.createLayoutData(GridLayout.Alignment.CENTER, GridLayout.Alignment.CENTER));
        attackPanel.addComponent(mainPanel, GridLayout.createLayoutData(GridLayout.Alignment.BEGINNING, GridLayout.Alignment.BEGINNING, true, true));
        attackPanel.addComponent(buttonPanel, GridLayout.createLayoutData(GridLayout.Alignment.CENTER, GridLayout.Alignment.CENTER));

        attackWindow.setTitle(TITLE + " - " + selectedTool.getToolName());
        attackWindow.setHints(Arrays.asList(Window.Hint.CENTERED, Window.Hint.EXPANDED));
        attackWindow.setComponent(attackPanel);

        if (gui.getActiveWindow() != null) {
            gui.removeWindow(gui.getActiveWindow());
        }

        gui.addWindowAndWait(attackWindow);
    }

    private void showNewCommandWindow() {

        Panel mainPanel = new Panel();

        toolCommand = selectedTool.generateToolCommand(tta3Attack);

        mainPanel.setLayoutManager(new GridLayout(2));

        Label commandLabel = new Label("TTA3 generated the following command for " + selectedTool.getToolName() + ":");

        mainPanel.addComponent(commandLabel, GridLayout.createHorizontallyFilledLayoutData(2));

        mainPanel.addComponent(new EmptySpace(), GridLayout.createHorizontallyFilledLayoutData(2));

        Label toolNameLabel = new Label("Tool Executable: ");
        Label toolNameValueLabel = new Label(toolCommand.getToolExecutableName());

        Label verboseLabel = new Label("Is Verbose: ");
        CheckBox verboseValueCheckBox = new CheckBox();
        verboseValueCheckBox.setChecked(toolCommand.isVerbose());
        verboseValueCheckBox.setEnabled(false);

        Label fileContentsLabel = new Label("Config File Contents: ");
        TextBox fileContentsValueTextBox = new TextBox(new TerminalSize(65, 6));

        String fileContents = new String(toolCommand.getFileContents(), StandardCharsets.UTF_8);
        fileContentsValueTextBox.setText(fileContents);
        fileContentsValueTextBox.setReadOnly(true);

        mainPanel.addComponent(toolNameLabel);
        mainPanel.addComponent(toolNameValueLabel);
        mainPanel.addComponent(verboseLabel);
        mainPanel.addComponent(verboseValueCheckBox);
        mainPanel.addComponent(fileContentsLabel, GridLayout.createHorizontallyFilledLayoutData(2));
        mainPanel.addComponent(fileContentsValueTextBox, GridLayout.createHorizontallyFilledLayoutData(2));

        Panel buttonPanel = new Panel(new GridLayout(4));

        Button backButton = new Button("Back", new Runnable() {
            @Override
            public void run() {
                gui.removeWindow(commandWindow);
                gui.addWindowAndWait(attackWindow);
            }
        });

        buttonPanel.addComponent(backButton,
                GridLayout.createLayoutData(GridLayout.Alignment.CENTER, GridLayout.Alignment.CENTER,true, false));

        Button cqfButton = new Button("Execute (CQF)", new Runnable() {
            @Override
            public void run() {
                commandExecutor= new CqfExecutor();
                showNewExecuteWindow();
            }
        });

        buttonPanel.addComponent(cqfButton,
                GridLayout.createLayoutData(GridLayout.Alignment.CENTER, GridLayout.Alignment.CENTER,true, false));

        Button cliButton = new Button("Execute (CLI)", new Runnable() {
            @Override
            public void run() {
                commandExecutor = new CliExecutor(true);
                showNewExecuteWindow();
            }
        });

        buttonPanel.addComponent(cliButton,
                GridLayout.createLayoutData(GridLayout.Alignment.CENTER, GridLayout.Alignment.CENTER,true, false));

        Button exitButton = new Button("Exit", new Runnable() {
            @Override
            public void run() {
                gui.removeWindow(gui.getActiveWindow());
                System.exit(0);

            }
        });

        buttonPanel.addComponent(exitButton,
                GridLayout.createLayoutData(GridLayout.Alignment.CENTER, GridLayout.Alignment.CENTER,true, false));

        Panel commandPanel = new Panel(new GridLayout(1));
        commandPanel.addComponent(new EmptySpace(), GridLayout.createLayoutData(GridLayout.Alignment.CENTER, GridLayout.Alignment.CENTER));
        commandPanel.addComponent(mainPanel, GridLayout.createLayoutData(GridLayout.Alignment.CENTER, GridLayout.Alignment.BEGINNING, true, true));
        commandPanel.addComponent(buttonPanel, GridLayout.createLayoutData(GridLayout.Alignment.CENTER, GridLayout.Alignment.CENTER));

        commandWindow.setTitle(TITLE + " - " + selectedTool.getToolName() + " Generated Command");
        commandWindow.setHints(Arrays.asList(Window.Hint.CENTERED, Window.Hint.EXPANDED));
        commandWindow.setComponent(commandPanel);
        commandWindow.setFocusedInteractable(cqfButton);

        if (gui.getActiveWindow() != null) {
            gui.removeWindow(gui.getActiveWindow());
        }
        gui.addWindowAndWait(commandWindow);
    }

    public void showNewExecuteWindow() {
        ExecutionId eid = commandExecutor.execute(tta3Attack, toolCommand);

        while (!commandExecutor.isFinished(eid)) {}

        executionResult = commandExecutor.getResult(eid);

        Panel mainPanel = new Panel();

        mainPanel.setLayoutManager(new GridLayout(1));

        Label commandLabel = new Label("TTA3 " + commandExecutor.getClass().getSimpleName() + " would execute the following:");

        TextBox executionResultTextBox = new TextBox(new TerminalSize(65, 12));
        executionResultTextBox.setText(executionResult.getStdOut());
        executionResultTextBox.setReadOnly(true);

        mainPanel.addComponent(commandLabel);
        mainPanel.addComponent(new EmptySpace());
        mainPanel.addComponent(executionResultTextBox, GridLayout.createLayoutData(GridLayout.Alignment.CENTER, GridLayout.Alignment.BEGINNING, true, true));

        Panel buttonPanel = new Panel(new GridLayout(3));

        Button backButton = new Button("Back", new Runnable() {
            @Override
            public void run() {
                gui.removeWindow(executeWindow);
                gui.addWindowAndWait(commandWindow);
            }
        });
        buttonPanel.addComponent(backButton,
                GridLayout.createLayoutData(GridLayout.Alignment.CENTER, GridLayout.Alignment.CENTER, true, false));

//        Button clipboardButton = new Button("Copy to Clipboard", new Runnable() {
//            @Override
//            public void run() {
//                if (!GraphicsEnvironment.isHeadless()) {
//                    Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
//                    clipboard.setContents(new StringSelection(executionResultTextBox.getText()), null);
//                } else {
//                    MessageDialogButton selection = MessageDialog.showMessageDialog(gui, "Headless Environment",
//                            "There is no clipboard available as the system is being run in an headless environment (e.g. over SSH).", MessageDialogButton.OK );
//                }
//            }
//        });
//        buttonPanel.addComponent(clipboardButton,
//                GridLayout.createLayoutData(GridLayout.Alignment.CENTER, GridLayout.Alignment.CENTER, true, false));

        Button runButton = new Button("Run", new Runnable() {
            @Override
            public void run() {

                if (commandExecutor instanceof CqfExecutor) {
                    String cqfURL = TextInputDialog.showDialog(gui, "CQF REST API Endpoint",
                            "Enter the CQF REST API Endpoint:", "");

                    if (cqfURL == null) {
                        return;
                    }

                    try {
                        new URL(cqfURL);
                    } catch (MalformedURLException mue) {
                        MessageDialog.showMessageDialog(gui, "Invalid URL", "The CQF REST API URL is invalid.", MessageDialogButton.OK);
                        return;
                    }
                    ((CqfExecutor) commandExecutor).setCqfApiUrl(cqfURL);
                }

                showActualExecutionWindow();
            }
        });

        buttonPanel.addComponent(runButton,
                GridLayout.createLayoutData(GridLayout.Alignment.CENTER, GridLayout.Alignment.CENTER, true, false));

        Button exitButton = new Button("Exit", new Runnable() {
            @Override
            public void run() {
                gui.removeWindow(gui.getActiveWindow());
                System.exit(0);
            }
        });

        buttonPanel.addComponent(exitButton,
                GridLayout.createLayoutData(GridLayout.Alignment.CENTER, GridLayout.Alignment.CENTER, true, false));

        Panel commandPanel = new Panel(new GridLayout(1));
        commandPanel.addComponent(new EmptySpace(), GridLayout.createLayoutData(GridLayout.Alignment.CENTER, GridLayout.Alignment.CENTER));
        commandPanel.addComponent(mainPanel, GridLayout.createLayoutData(GridLayout.Alignment.CENTER, GridLayout.Alignment.BEGINNING, true, true));
        commandPanel.addComponent(buttonPanel, GridLayout.createLayoutData(GridLayout.Alignment.CENTER, GridLayout.Alignment.CENTER));

        executeWindow.setTitle(TITLE + " - " + commandExecutor.getClass().getSimpleName() + " Execution");
        executeWindow.setHints(Arrays.asList(Window.Hint.CENTERED, Window.Hint.EXPANDED));
        executeWindow.setComponent(commandPanel);
        //executeWindow.setFocusedInteractable(clipboardButton);

        if (gui.getActiveWindow() != null) {
            gui.removeWindow(gui.getActiveWindow());
        }

        gui.addWindowAndWait(executeWindow);
    }

    public void showActualExecutionWindow() {

        Panel mainPanel = new Panel();

        mainPanel.setLayoutManager(new GridLayout(1));

        Label commandLabel = new Label("Output of executing "
                + selectedTool.getToolName() + " via " + commandExecutor.getClass().getSimpleName() + " was:");

        TextBox executionOutputTextBox = new TextBox(new TerminalSize(65, 10));
        executionOutputTextBox.setText("Executing -");
        executionOutputTextBox.setReadOnly(true);

        Label resultLabel = new Label("Raw Result of "
                + selectedTool.getToolName() + " via " + commandExecutor.getClass().getSimpleName() + " was:");

        TextBox executionResultBox = new TextBox(new TerminalSize(65, 10));
        executionResultBox.setReadOnly(true);

        new Thread(new Runnable() {
            int counter = 0;

            @Override
            public void run() {
                // Do it for real
                commandExecutor.setDebug(false);

                ExecutionId eid = commandExecutor.execute(tta3Attack, toolCommand);

                while (!commandExecutor.isFinished(eid)) {
                    try {
                        Thread.sleep(250);
                    } catch (InterruptedException e) { }

                    switch (counter) {
                        case 0:
                            executionOutputTextBox.setText("Executing \\");
                            counter = 1;
                            break;
                        case 1:
                            executionOutputTextBox.setText("Executing |");
                            counter = 2;
                            break;
                        case 2:
                            executionOutputTextBox.setText("Executing /");
                            counter = 3;
                            break;
                        default:
                            executionOutputTextBox.setText("Executing -");
                            counter = 0;
                            break;
                    }
                }

                executionResult = commandExecutor.getResult(eid);

                executionOutputTextBox.setText(executionResult.getStdOut());
                executionResultBox.setText(executionResult.getResultFileContents());
            }
        }).start();

        mainPanel.addComponent(commandLabel);
        mainPanel.addComponent(executionOutputTextBox, GridLayout.createLayoutData(GridLayout.Alignment.CENTER, GridLayout.Alignment.BEGINNING, true, true));

        mainPanel.addComponent(new EmptySpace());
        mainPanel.addComponent(resultLabel);
        mainPanel.addComponent(executionResultBox, GridLayout.createLayoutData(GridLayout.Alignment.CENTER, GridLayout.Alignment.BEGINNING, true, true));

        Panel buttonPanel = new Panel(new GridLayout(2));

        Button backButton = new Button("Back", new Runnable() {
            @Override
            public void run() {
                gui.removeWindow(executeWindow);
                gui.addWindowAndWait(commandWindow);
            }
        });

        buttonPanel.addComponent(backButton,
                GridLayout.createLayoutData(GridLayout.Alignment.CENTER, GridLayout.Alignment.CENTER, true, false));

        Button processButton = new Button("Process Results", new Runnable() {
            @Override
            public void run() {
                showNewResultWindow();
            }
        });

        buttonPanel.addComponent(processButton,
                GridLayout.createLayoutData(GridLayout.Alignment.CENTER, GridLayout.Alignment.CENTER, true, false));

        Panel commandPanel = new Panel(new GridLayout(1));
        commandPanel.addComponent(new EmptySpace(), GridLayout.createLayoutData(GridLayout.Alignment.CENTER, GridLayout.Alignment.CENTER));
        commandPanel.addComponent(mainPanel, GridLayout.createLayoutData(GridLayout.Alignment.CENTER, GridLayout.Alignment.BEGINNING, true, true));
        commandPanel.addComponent(buttonPanel, GridLayout.createLayoutData(GridLayout.Alignment.CENTER, GridLayout.Alignment.CENTER));

        executeWindow.setTitle(TITLE + " - " + commandExecutor.getClass().getSimpleName() + " Execution");
        executeWindow.setHints(Arrays.asList(Window.Hint.CENTERED, Window.Hint.EXPANDED));
        executeWindow.setComponent(commandPanel);
        //executeWindow.setFocusedInteractable(clipboardButton);

        if (gui.getActiveWindow() != null) {
            gui.removeWindow(gui.getActiveWindow());
        }

        gui.addWindowAndWait(executeWindow);
    }

    public void showNewResultWindow() {

        toolResult = selectedTool.parseAttackResult(tta3Attack, executionResult);

        Panel mainPanel = new Panel();

        mainPanel.setLayoutManager(new GridLayout(2));

        Label commandLabel = new Label("Processed Results from "
                + selectedTool.getToolName() + " was:");


        mainPanel.addComponent(commandLabel, GridLayout.createHorizontallyFilledLayoutData(2));

        mainPanel.addComponent(new EmptySpace(), GridLayout.createHorizontallyFilledLayoutData(2));

        Label successfulRunLabel = new Label("Successful Run: ");
        CheckBox successfulRunCheckBox = new CheckBox();
        successfulRunCheckBox.setChecked(toolResult.isSuccessfulRun());
        successfulRunCheckBox.setEnabled(false);

        Label vulnerabilityFoundLabel = new Label("Vulnerability Found: ");
        CheckBox vulnerabilityFoundCheckBox = new CheckBox();
        vulnerabilityFoundCheckBox.setChecked(toolResult.isVulnerabilityFound());
        vulnerabilityFoundCheckBox.setEnabled(false);

        Label vulnerabilitiesFoundLabel = new Label("Number of Vulnerabilities Found: ");
        Label vulnerabilitiesFound = new Label(String.valueOf(toolResult.getQuantityFound()));

        Label resultsLabel = new Label("Tool Result:");
        TextBox resultsTextBox = new TextBox(new TerminalSize(65, 6));
        resultsTextBox.setText(toolResult.getResultsText().replaceAll("(.{65})", "$1\n"));
        resultsTextBox.setReadOnly(true);

        mainPanel.addComponent(successfulRunLabel);
        mainPanel.addComponent(successfulRunCheckBox);
        mainPanel.addComponent(vulnerabilityFoundLabel);
        mainPanel.addComponent(vulnerabilityFoundCheckBox);
        mainPanel.addComponent(vulnerabilitiesFoundLabel);
        mainPanel.addComponent(vulnerabilitiesFound);
        mainPanel.addComponent(resultsLabel, GridLayout.createHorizontallyFilledLayoutData(2));
        mainPanel.addComponent(resultsTextBox, GridLayout.createLayoutData(GridLayout.Alignment.CENTER, GridLayout.Alignment.BEGINNING, true, true));

//        mainPanel.addComponent(new EmptySpace());
//        mainPanel.addComponent(resultLabel);
//        mainPanel.addComponent(executionResultBox, GridLayout.createLayoutData(GridLayout.Alignment.CENTER, GridLayout.Alignment.BEGINNING, true, true));

        Panel buttonPanel = new Panel(new GridLayout(2));

        Button backButton = new Button("Back", new Runnable() {
            @Override
            public void run() {
                gui.removeWindow(executeWindow);
                gui.addWindowAndWait(commandWindow);
            }
        });

        buttonPanel.addComponent(backButton,
                GridLayout.createLayoutData(GridLayout.Alignment.CENTER, GridLayout.Alignment.CENTER, true, false));

        Button exitButton = new Button("Exit", new Runnable() {
            @Override
            public void run() {
                gui.removeWindow(gui.getActiveWindow());
                System.exit(0);
            }
        });

        buttonPanel.addComponent(exitButton,
                GridLayout.createLayoutData(GridLayout.Alignment.CENTER, GridLayout.Alignment.CENTER, true, false));

        Panel commandPanel = new Panel(new GridLayout(1));
        commandPanel.addComponent(new EmptySpace(), GridLayout.createLayoutData(GridLayout.Alignment.CENTER, GridLayout.Alignment.CENTER));
        commandPanel.addComponent(mainPanel, GridLayout.createLayoutData(GridLayout.Alignment.CENTER, GridLayout.Alignment.BEGINNING, true, true));
        commandPanel.addComponent(buttonPanel, GridLayout.createLayoutData(GridLayout.Alignment.CENTER, GridLayout.Alignment.CENTER));

        resultWindow.setTitle(TITLE + " - " + commandExecutor.getClass().getSimpleName() + " Processed Result");
        resultWindow.setHints(Arrays.asList(Window.Hint.CENTERED, Window.Hint.EXPANDED));
        resultWindow.setComponent(commandPanel);
        //executeWindow.setFocusedInteractable(clipboardButton);

        if (gui.getActiveWindow() != null) {
            gui.removeWindow(gui.getActiveWindow());
        }

        gui.addWindowAndWait(resultWindow);
    }

    private Map<String, String> getMetadata() {
        return MOCK_DATA;
    }

    private Set<String> getApps() {
        return MOCK_APPS;
    }
}

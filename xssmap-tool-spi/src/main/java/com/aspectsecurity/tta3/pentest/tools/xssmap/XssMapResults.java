package com.aspectsecurity.tta3.pentest.tools.xssmap;

import java.util.Collection;
import com.aspectsecurity.astam.tta3.pentest.common.ToolResult;
import org.apache.commons.lang3.builder.ToStringBuilder;
import org.apache.commons.lang3.builder.ToStringStyle;

/*
    Application Security Threat Attack Modeling (ASTAM)

    Copyright (C) 2017 Applied Visions - http://securedecisions.com

    Written by Aspect Security - https://aspectsecurity.com

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/

/**
 * ToolResult for XssMap
 *
 * @author Aspect Security
 */
public class XssMapResults extends ToolResult {

    public XssMapResults(boolean successfulRun, boolean vulnerabilityFound, int quantityFound, String resultsText,
                           Collection<? extends Exploit> exploits) {
        super(successfulRun, vulnerabilityFound, quantityFound, resultsText, exploits);
    }

    public static class XssVulnerability implements Exploit {
        private final String requestType;
        private final String requestRoot;
        private final String parameter;
        private final String attackVector;
        private final String payload;
        private final String message;

        public XssVulnerability(String requestType, String requestRoot, String parameter, String attackVector,
                                String payload, String message)
        {
            this.requestType = requestType;
            this.requestRoot = requestRoot;
            this.parameter = parameter;
            this.attackVector = attackVector;
            this.payload = payload;
            this.message = message;
        }

        public String getRequestType() { return requestType; }

        public String getRequestRoot() { return requestRoot; }

        public String getParameter() { return parameter; }

        public String getAttackVector() { return attackVector; }

        public String getPayload() { return payload; }

        public String getMessage() { return message; }

        public String toString() {
            return ToStringBuilder.reflectionToString(this, ToStringStyle.SIMPLE_STYLE);
        }
    }

    public String toString() {
        return ToStringBuilder.reflectionToString(this, ToStringStyle.SIMPLE_STYLE);
    }
}

